Scalability of Web Systems
Web Programming in Go
20 Sep 2017
Tags: Go, Programming, Web

Jonathan Fürst
IT University of Copenhagen
jonf@itu.dk
http://jofu.org/
@jf87


* Outline

1.

- Web Basics
- Web Services Architectural Styles & Formats
- Components of Web Systems

2.

- Web Programming Hands-On

# Philippe

# 1.
# 3 tier architecture
# cloning and partitioning for scaling

# 2.
# (Remote) Procedure Call
# REST
# Message Queues
# gRPC
# Protocol Buffers


* Web Basics

* Web Basics: Web Application

- Client-Server
- Request-Response
- HTTP Protocol

.image figures/request_response.png 200 _
.caption Some figures and content from the following slides from Go Web Programming, by Sau Sheong Chang.

* Web Basics: HTTP Requests

1. Request-line
2. Zero or more request headers
3. Empty line
4. Message body (optional)

    GET /Protocols/rfc2616/rfc2616.html HTTP/1.1
    Host: www.w3.org
    User-Agent: Mozilla/5.0
    (empty line)


* Web Basics: HTTP Response

1. Status line
2. Zero or more response headers
3. Empty line
4. Message body (optional)

    200 OK
    Date: Sat, 22 Nov 2014 12:58:58 GMT
    Server: Apache/2
    Last-Modified: Thu, 28 Aug 2014 21:01:33 GMT
    Content-Length: 33115
    Content-Type: text/html; charset=iso-8859-1
    
    <!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/ TR/xhtml1/DTD/xhtml1-strict.dtd"> <html
    xmlns='http://www.w3.org/1999/ xhtml'> <head><title>Hypertext Transfer
    Protocol -- HTTP/1.1</title></ head><body>...</body></html>

* Web Basics: URL/URI

- / separates segements in hierarchical path
- ? starts query
- & separates key value pairs
- # separates fragments

e.g., 

    http://sausheong:password@www.example.com/docs/file?name=sausheong&location=singapore#summary


* Web Basics: HTTP/1.1

Request-Response protocol:

- Each connection supports pipelining
- ... but not parallelism (in-order only)
- Need multiple connections per client-server pair to avoid in-order stalls across multiple requests → multiple CPU-intensive TLS handshakes, higher memory footprint

Content can be compressed, but headers are in text format

Can do single direction streaming, but not bidirectional

    POST /upload HTTP/1.1
    Host: wwww.example.com
    Content-Type: application/json
    Content-Length: 15

    {"msg": "hello!"}

.caption This slide and some of the following adapted from Vijay Pai's [[platformlab.stanford.edu/Seminar%20Talks/gRPC.pdf][slides]].

* Web Basics: HTTP/2

- Binary vs. text based
- Multiplexed: multiple requests, responses per TCP connection
- Header compression
- Server can push to client
- Out of the box support since Go 1.8

.caption More on Go's HTTP/2: [[][https://blog.golang.org/h2push]]

* Web Basics: HTTP/2

.image figures/http2.png 400 _

.link http://www.http2demo.io


* Web Services Architectural Styles & Formats

* Architectural Styles

*RPC*

- Remote call of functions
- RPC-based APIs are great for actions (that is, procedures or commands).

*HTTP-Based*REST*

- Client-server relationship, data exchange through XML, JSON
- Stateless: not persisting sessions between requests
- Utilize HTTP features whenever possible
- Great for modeling resources/entities, CRUD (create, read, update, delete)

# *GraphQL*

# - query language, specification, and collection of tools
# - operates over a single HTTP endpoint, optimized for performance and flexibility

* gRPC

=> open-source, multi-platform RPC framework, many supported languages and activly developed:

- HTTP/2 as transport layer
- IDL to describe service API
- Serialization with protobuf (binary data representation)
- Automatically generates client stubs and abstract server classes in 10+ languages

For more, see Philippe's lecture from 06.09.2017 :-)


: HTTP/2:
: binary framing, header compression
: bidirectional streams, server push support
: connection multiplexing across requests and streams


# * GraphQL

# - what is GraphQL

# * REST vs. GraphQL

# .image figures/rest_vs_graphql.png 400 _

* Some (opinionated) Format Picks from Big to Small

*XML*

- Complex, high overhead, not easily human readable

*JSON*

- Simple, easier to parse for humans

*BSON*

- Convert JSON strings to binary

*Protocol*Buffers*

- Binary, compress integer data, use integer for field names
- Needs generated code for marshall/unmarshall



* (Web-)Sockets

*TCP*Socket*

- Endpoint of a TCP connection (transport layer)

*Websocket*

- High-level (application layer) protocol build on top of TCP
- Initiate websocket connection through HTTP handshake (overcome firewalls, etc.)

=> You can use both for communication between different programs in your network (TCP Sockets) or over the web (websockets).
=> Websockets are useful to push from server to client (no need for long polling).


* Main Motivation: Microservices

The main motivation behind RPC are (large-scale) distributed systems where an
application is composed of several services:

- Allows for loosely coupled (separate concerns) and multilingual development
- Scale systems across nodes, clusters, data centers

=> Services communicate with each other using RPC

.image figures/microservices.png 300 _



* Monolithic Architecture

Layered architecture:

- Presentation Layer (i.e., handle HTTP requests and respond with HTML, JSON/XML...)
- Business Layer (i.e., whatever your application is about)
- Data Layer (i.e., data model, database access)

=> Integrate with other services using REST, messaging etc...
=> Scale horizontally by cloning and load balancer


* Microservices Architecture

- Application is split into smaller, autonomous services that communicate with each other.
- Each service: Do one thing well.


.image figures/microservices_example.png 300 _
.caption Figure from microservices.com

* So what's better?

It depends...

No free lunch: Distributed systems complexities:

- CAP theorem
- Distributed transactions...

General consensus:

=> Start with monolithic until your application becomes too hard to maintain, to adopt new technologies more quickly, aimed performance improvements etc

: scaling is more in the terms of team size, complexity, you can scale monolithic applications similar
: Good
: Strong Module Boundaries: Microservices reinforce modular structure, which is particularly important for larger teams.
: Independent Deployment: Simple services are easier to deploy, and since they are autonomous, are less likely to cause system failures when they go wrong.
: Technology Diversity: With microservices you can mix multiple languages, development frameworks and data-storage technologies.
: Bad
: Distribution: Distributed systems are harder to program, since remote calls are slow and are always at risk of failure.
: Eventual Consistency: Maintaining strong consistency is extremely difficult for a distributed system, which means everyone has to manage eventual consistency.
: Operational Complexity: You need a mature operations team to manage lots of services, which are being redeployed regularly.

* Components of Web Systems

* Lets look inside the server

.image figures/request_response.png 200 _
.caption Figure from Go Web Programming

* Multiplexer, Handlers & Template Engine

.image figures/web_application_server.png 520 _
.caption Figure from Go Web Programming


* Putting all together

.image figures/web_application_server_database.png 400 _
.caption Figure from Go Web Programming

* Hello Web!

.play code/hello_web.go
